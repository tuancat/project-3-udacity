version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.5
  python: circleci/python@2.1.1
  slack: circleci/slack@4.1

commands:
  exports:
    steps:
      - run:
          name: "Get git commit short-hash for the current and the previous commit"
          command: |
            # Git hash for the current commit
            echo 'export current_commit=<< pipeline.git.revision >>' >> "$BASH_ENV"
            echo 'export CUR_SHORT_HASH="${current_commit:0:7}"' >> "$BASH_ENV"
            # Git hash for the previous commit
            echo 'export previous_commit=<< pipeline.git.base_revision >>' >> "$BASH_ENV"
            echo 'export PRE_SHORT_HASH="${previous_commit:0:7}"' >> "$BASH_ENV"
      - run:
          name: "Export environment variable"
          command: |
            echo 'export WORKSPACE_DIR="/home/circleci/workspace"' >> "$BASH_ENV"
            echo 'export PROJECT_ROOT_DIR="/home/circleci/project"' >> "$BASH_ENV"
            echo 'export TEMPLATE_ROOT_DIR="project-3-udacity"' >> "$BASH_ENV"
            echo 'export PROJECT_TAG="tuancnh-Udacity-final-project-3"' >> "$BASH_ENV"
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build frontend
          command: |
            pwd
            ls
            ls $(eval echo "$CIRCLE_WORKING_DIRECTORY")
            cd $(eval echo "$PROJECT_ROOT_DIR/frontend")
            npm install
            npm run build --force
      - save_cache:
          paths: [/home/circleci/project/frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Save all db varibles in env file
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/backend")
            touch .env
            echo NODE_ENV=production >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
      - run:
          name: Build backend
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/backend")
            npm install
            npm run build
            cd ..
            # Compress the backend folder
            tar -C backend -czvf artifact-backend.tar.gz .
            # no error if existing, make parent directories as needed
            mkdir --parents $WORKSPACE_DIR
            # Move the compressed file to workspace folder
            mv artifact-backend.tar.gz $WORKSPACE_DIR/artifact-backend.tar.gz
      - persist_to_workspace:
          root: /home/circleci/workspace
          paths:
            - "artifact-backend.tar.gz"
      - save_cache:
          paths: [ /home/circleci/project/backend/node_modules ]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    # Docker image here that supports AWS CLI
    steps:
      - checkout
      # Export environment variable
      - exports
      # Set up AWS Credentials
        # Create backend infrastructure
      # Checkout code from git
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            ls
            ls $(eval echo "$CIRCLE_WORKING_DIRECTORY")
            aws cloudformation deploy \
              --template-file backend.yml \
              --tags project=project-3-backend \
              --stack-name Udapeople-Backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --tags project=project-3-frontend \
              --stack-name Udapeople-Frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1 \
              --parameter-overrides MyBucketName="bucket-${CIRCLE_WORKFLOW_ID:0:5}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/inventory.txt

  add_publicipaddress_to_inventory:
    docker:
      - image: amazon/aws-cli
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      - exports
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: "Get EC2 Instances Public IP Address"
          command: |
            cd ~/project/
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=project-3-backend" \
            --output text >> inventory
      - run:
          name: "Move inventory file into workspace"
          command: |
            cd ~/project/
            mv inventory ~/inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - "inventory"

  configure-infrastructure:
    docker:
      - image: python:3.10.10-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f4:85:15:29:15:71:41:1a:de:65:52:b8:5b:3b:0e:1b"]
      - run:
          name: "Install Ansible"
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Run Playbook and Configure server
          command: |
            cd ~/project/
            ansible-playbook -i ~/inventory main.yml --ssh-common-args='-o StrictHostKeyChecking=no'

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - run:
          name: Save all db varibles in env file
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/backend")
            touch .env
            echo NODE_ENV=production >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
      - run:
          name: Run migrations
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/backend")
            npm install
            echo $TYPEORM_HOST
            echo $TYPEORM_CONNECTION
            echo $TYPEORM_DATABASE
            echo $TYPEORM_USERNAME
            echo $TYPEORM_USERNAME
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            npm install 
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/frontend")
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Test backend
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/backend")
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: "Scan frontend"
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/frontend")
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: "Scan backend"
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/backend")
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical
  notify:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

workflows:
  default:
    jobs:
      - add_publicipaddress_to_inventory
      - configure-infrastructure:
          requires: [ add_publicipaddress_to_inventory ]
      - run-migrations:
          requires: [ configure-infrastructure ]
      - notify:
          context: project-3
