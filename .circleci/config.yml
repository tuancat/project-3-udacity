version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.5
  python: circleci/python@2.1.1
  slack: circleci/slack@4.1

commands:
  exports:
    steps:
      - run:
          name: "Get git commit short-hash for the current and the previous commit"
          command: |
            # Git hash for the current commit
            echo 'export current_commit=<< pipeline.git.revision >>' >> "$BASH_ENV"
            echo 'export CUR_SHORT_HASH="${current_commit:0:7}"' >> "$BASH_ENV"
            # Git hash for the previous commit
            echo 'export previous_commit=<< pipeline.git.base_revision >>' >> "$BASH_ENV"
            echo 'export PRE_SHORT_HASH="${previous_commit:0:7}"' >> "$BASH_ENV"
      - run:
          name: "Export environment variable"
          command: |
            echo 'export WORKSPACE_DIR="/home/circleci/workspace"' >> "$BASH_ENV"
            echo 'export PROJECT_ROOT_DIR="/home/circleci/project"' >> "$BASH_ENV"
            echo 'export TEMPLATE_ROOT_DIR="project-3-udacity"' >> "$BASH_ENV"
            echo 'export PROJECT_TAG="tuancnh-Udacity-final-project-3"' >> "$BASH_ENV"
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build frontend
          command: |
            pwd
            ls
            ls $(eval echo "$CIRCLE_WORKING_DIRECTORY")
            cd $(eval echo "$PROJECT_ROOT_DIR/frontend")
            npm install
            npm run build --force
      - save_cache:
          paths: [/home/circleci/project/frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Save all db varibles in env file
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/backend")
            touch .env
            echo NODE_ENV=production >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
      - run:
          name: Build backend
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/backend")
            npm install
            npm run build
            cd ..
            # Compress the backend folder
            tar -C backend -czvf artifact-backend.tar.gz .
            # no error if existing, make parent directories as needed
            mkdir --parents $WORKSPACE_DIR
            # Move the compressed file to workspace folder
            mv artifact-backend.tar.gz $WORKSPACE_DIR/artifact-backend.tar.gz
      - persist_to_workspace:
          root: /home/circleci/workspace
          paths:
            - "artifact-backend.tar.gz"
      - save_cache:
          paths: [ /home/circleci/project/backend/node_modules ]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    # Docker image here that supports AWS CLI
    steps:
      - checkout
      # Export environment variable
      - exports
      # Set up AWS Credentials
      - aws-cli/setup
        # Create backend infrastructure
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file /home/circleci/workspace/.circleci/files/backend.yml \
              --tags project-3-backend \
              --stack-name Udapeople-Backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file /home/circleci/workspace/.circleci/files/frontend.yml \
              --tags project-3-frontend \
              --stack-name Udapeople-Frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/frontend")
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Test backend
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/backend")
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: "Scan frontend"
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/frontend")
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: "Scan backend"
          command: |
            cd $(eval echo "$PROJECT_ROOT_DIR/backend")
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical
  notify:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

workflows:
  default:
    jobs:
      - build-frontend
      - test-frontend:
          requires: [build-frontend]
      - scan-frontend:
          requires: [build-frontend]
      - build-backend
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
          filters:
            branches:
              only: [ test-feature-branch ]
      - notify:
          context: project-3
